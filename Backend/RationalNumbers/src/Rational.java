public class Rational implements Comparable<Rational>, Cloneable
{
	private long numerator;
	private long denominator;

	public Rational( long numerator, long denominator )
	{
		if( denominator == 0 )
			throw new IllegalArgumentException( "Denominator must not be zero!" );

		this.numerator = numerator;
		this.denominator = denominator;

		this.normalize();
	}

	public final void normalize()
	{
		long gcd = this.findGreatestCommonDivisor();

		this.numerator = this.numerator / gcd;
		this.denominator = this.denominator / gcd;
	}

	private final long findGreatestCommonDivisor()
	{
		long n = Math.abs( this.numerator );
		long d = Math.abs( this.denominator );

		while( d != 0 )
		{
			long helper = n % d;
			n = d;
			d = helper;
		}

		return n;
	}

	/*
	 *	Comparable Interface Implementation
	 */
	@Override
	public int compareTo( Rational rational )
	{
		long a = this.numerator * rational.getDenominator();
		long b = this.denominator * rational.getNumerator();

		if( a < b )
			return -1;
		else if( a > b )
			return 1;
		else
			return 0;
	}

	/*
		 * 	Object Identity
		 * 	Methods partly generated by IntelliJ Idea
		 */
	@Override
	public boolean equals(Object o)
	{
		if (this == o) return true;
		if (o == null || getClass() != o.getClass()) return false;

		Rational rational = (Rational) o;

		this.normalize();
		rational.normalize();

		if (denominator != rational.denominator) return false;
		if (numerator != rational.numerator) return false;

		return true;
	}

	@Override
	public int hashCode()
	{
		int result = (int) (numerator ^ (numerator >>> 32));
		result = 31 * result + (int) (denominator ^ (denominator >>> 32));
		return result;
	}


	/*
	 * 	Math Operations
	 */
	public Rational add( Rational other )
	{
		Rational result = new Rational( (this.getNumerator() * other.getDenominator() ) +
									 (other.getNumerator() * this.denominator),
									 this.getDenominator() * other.getDenominator() );
		result.normalize();
		return result;
	}

	public void addTo( Rational other )
	{
		Rational result = this.add( other );
		this.setNumerator( result.getNumerator() );
		this.setDenominator( result.getDenominator() );
	}

	public Rational sub( Rational other )
	{
		return this.add( new Rational( -other.getNumerator(), other.getDenominator() ) );
	}

	public Rational mul( Rational other )
	{
		Rational result = new Rational( this.getNumerator() * other.getNumerator(),
										this.getDenominator() * other.getDenominator() );
		result.normalize();
		return result;
	}

	public Rational div( Rational other )
	{
		return this.mul( new Rational( other.getDenominator(), other.getNumerator() ) );
	}

	/*
	 * 	Getter and Setter
	 */
	public long getDenominator()
	{
		return denominator;
	}

	public void setDenominator(long denominator)
	{
		this.denominator = denominator;
	}

	public long getNumerator()
	{
		return numerator;
	}

	public void setNumerator(long numerator)
	{
		this.numerator = numerator;
	}

	/*
	 * Methods overridden from Object
	 */

	@Override
	public String toString()
	{
		return this.numerator + "/" + this.denominator;
	}

	@Override
	protected Rational clone() throws CloneNotSupportedException
	{
		return (Rational)super.clone();
	}

	/*
	 *	Static Factory Methods
	 */
	public static Rational valueOf( String input ) throws IllegalArgumentException
	{
		input = input.trim(); // Removes surrounding whitespace
		int indexOfSlash = input.indexOf( '/' );

		if( indexOfSlash == -1 )
			throw new IllegalArgumentException( "Error reading Input. Rational String must be like \"a/b\"" );

		int n = 0;
		int d = 0;
		try
		{
			n = Integer.parseInt( input.substring( 0, indexOfSlash) );
			d = Integer.parseInt( input.substring( indexOfSlash + 1 ) );
		}
		catch (NumberFormatException e)
		{
			throw new IllegalArgumentException( "Error reading Input. Rational String must be like \"a/b\"" );
		}

		return new Rational( n, d );
	}

	/*
	 * Some other static Methods
	 * Just to show other possible Method Signatures
	 */
	public static Rational add( Rational a, Rational b )
	{
		return a.add( b );
	}

	public static Rational sub( Rational a, Rational b )
	{
		return a.sub( b );
	}
}
